<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.Pawfect.mapper.ReviewMapper">

    <select id="selectReviewsWithUserByContentId" resultType="com.example.Pawfect.dto.ReviewDto">
	SELECT r.reviewId, r.contentId, r.userId, r.title, r.reviewRating,
	       r.reviewContent, r.reviewRegdate,
	       r.firstimage, r.addr1, r.mapX, r.mapY,
	       u.userNickname, u.userImage
	FROM review r
	JOIN user u ON r.userId = u.userId
	WHERE r.contentId = #{contentId}
	ORDER BY r.reviewRegdate DESC
</select>

	
	<select id="selectPagedReviewsWithUser" resultType="com.example.Pawfect.dto.ReviewDto">
	    SELECT r.reviewId, r.contentId, r.userId, r.title, r.reviewContent, r.reviewRating, r.reviewRegdate,
	           u.userNickname, u.userImage
	    FROM review r
	    JOIN user u ON r.userId = u.userId
	    WHERE r.contentId = #{contentId}
	    ORDER BY r.reviewRegdate DESC
	    LIMIT #{limit} OFFSET #{offset}
	</select>

    <!-- 마지막 삽입된 reviewId 가져오기 -->
    <select id="getLastInsertedReviewId" resultType="int">
        SELECT LAST_INSERT_ID()
    </select>

    <!-- 리뷰 이미지 저장 -->
    <insert id="insertReviewImageWithOrder">
        INSERT INTO review_images(reviewId, reviewImage, reviewImageOrder)
        VALUES(#{reviewId}, #{imagePath}, #{imageOrder})
    </insert>
    
    <select id="selectReviewImagesByOrder" resultType="String">
        SELECT reviewImage
        FROM review_images
        WHERE reviewId = #{contentId}
        ORDER BY reviewImageOrder
    </select>
    
    <select id="selectReviewImagesByReviewId" resultType="string">
	  SELECT reviewImage
	  FROM review_images
	  WHERE reviewId = #{reviewId}
	  ORDER BY reviewImageOrder
	</select>
	
	<select id="countReviewsByContentId" resultType="int">
	    SELECT COUNT(*) FROM review WHERE contentId = #{contentId}
	</select>
	
	<select id="findUserIdByReviewId" resultType="String">
	  SELECT userId FROM review WHERE reviewId = #{reviewId}
	</select>
	
	<delete id="deleteReview">
	  DELETE FROM review WHERE reviewId = #{reviewId}
	</delete>
	
	<select id="getAverageRating" resultType="double">
	  SELECT IFNULL(AVG(reviewRating), 0)
	  FROM review
	  WHERE contentId = #{contentId}
	</select>
	
	<!-- 리뷰 수 기준 정렬 -->
	<select id="selectContentIdsSortedByReviewCountAndType" resultType="map">
		  SELECT contentId,
	       COUNT(*) AS reviewCount,
	       AVG(reviewRating) AS avgRating,
	       ANY_VALUE(title) AS title,
	       ANY_VALUE(firstimage) AS firstimage,
	       ANY_VALUE(addr1) AS addr1,
	       ANY_VALUE(mapX) AS mapX,
	       ANY_VALUE(mapY) AS mapY
		FROM review
		WHERE contentTypeId = #{contentTypeId}
		GROUP BY contentId
		ORDER BY reviewCount DESC
	</select>

	
	<!-- 평균 별점 기준 정렬 -->
	<select id="selectContentIdsSortedByAvgRatingAndType" resultType="map">
	  SELECT contentId,
	         COUNT(*) AS reviewCount,
	         AVG(reviewRating) AS avgRating,
	         ANY_VALUE(title) AS title,
	       	 ANY_VALUE(firstimage) AS firstimage,
	         ANY_VALUE(addr1) AS addr1,
	         ANY_VALUE(mapX) AS mapX,
	         ANY_VALUE(mapY) AS mapY
	  FROM review
	  WHERE contentTypeId = #{contentTypeId}
	  GROUP BY contentId
	  ORDER BY avgRating DESC
	</select>
	
	<!-- 리뷰 수 기준 정렬 -->
	<select id="selectContentIdsSortedByReviewCountInArea" resultType="map">
		  SELECT contentId,
	       COUNT(*) AS reviewCount,
	       AVG(reviewRating) AS avgRating,
	       ANY_VALUE(title) AS title,
	       ANY_VALUE(firstimage) AS firstimage,
	       ANY_VALUE(addr1) AS addr1,
	       ANY_VALUE(mapX) AS mapX,
	       ANY_VALUE(mapY) AS mapY
		FROM review
		WHERE contentTypeId = #{contentTypeId}
		GROUP BY contentId
		ORDER BY reviewCount DESC
	</select>

	
	<!-- 평균 별점 기준 정렬 -->
	<select id="selectContentIdsSortedByAvgRatingInArea" resultType="map">
	  SELECT contentId,
	         COUNT(*) AS reviewCount,
	         AVG(reviewRating) AS avgRating,
	         ANY_VALUE(title) AS title,
	         ANY_VALUE(firstimage) AS firstimage,
	         ANY_VALUE(addr1) AS addr1,
	         ANY_VALUE(mapX) AS mapX,
	         ANY_VALUE(mapY) AS mapY
	  FROM review
	  WHERE contentTypeId = #{contentTypeId}
	  GROUP BY contentId
	  ORDER BY avgRating DESC
	</select>

	
	<insert id="insertReview" parameterType="com.example.Pawfect.dto.ReviewDto"
	        useGeneratedKeys="true" keyProperty="reviewId">
	  INSERT INTO review(
	    contentId, userId, title, reviewContent, reviewRating,
	    contentTypeId, firstimage, addr1, mapX, mapY,
	    areaCode, sigunguCode
	  )
	  VALUES(
	    #{contentId}, #{userId}, #{title}, #{reviewContent}, #{reviewRating},
	    #{contentTypeId}, #{firstimage}, #{addr1}, #{mapX}, #{mapY},
	    #{areaCode}, #{sigunguCode}
	  )
	</insert>
	
	<select id="selectContentIdsSortedByReviewCountAndArea" resultType="map">
	  SELECT contentId,
	         COUNT(*) AS reviewCount,
	         AVG(reviewRating) AS avgRating,
	         ANY_VALUE(contentTypeId) AS contentTypeId,
	         ANY_VALUE(title) AS title,
	         ANY_VALUE(firstimage) AS firstimage,
	         ANY_VALUE(addr1) AS addr1,
	         ANY_VALUE(mapX) AS mapX,
	         ANY_VALUE(mapY) AS mapY
	  FROM review
	  WHERE 1 = 1
	    <if test="areaCode != null and areaCode != ''">
	      AND areaCode = #{areaCode}
	    </if>
	    <if test="sigunguCode != null and sigunguCode != ''">
	      AND sigunguCode = #{sigunguCode}
	    </if>
	  GROUP BY contentId
	  ORDER BY reviewCount DESC
	</select>
	
	<select id="selectContentIdsSortedByAvgRatingAndArea" resultType="map">
  SELECT contentId,
         COUNT(*) AS reviewCount,
         AVG(reviewRating) AS avgRating,
         ANY_VALUE(contentTypeId) AS contentTypeId,
         ANY_VALUE(title) AS title,
         ANY_VALUE(firstimage) AS firstimage,
         ANY_VALUE(addr1) AS addr1,
         ANY_VALUE(mapX) AS mapX,
         ANY_VALUE(mapY) AS mapY
  FROM review
  WHERE 1 = 1
    <if test="areaCode != null and areaCode != ''">
      AND areaCode = #{areaCode}
    </if>
    <if test="sigunguCode != null and sigunguCode != ''">
      AND sigunguCode = #{sigunguCode}
    </if>
  GROUP BY contentId
  ORDER BY avgRating DESC
</select>
	
	
	
</mapper>




